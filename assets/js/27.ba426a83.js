(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{630:function(e,_,v){"use strict";v.r(_);var t=v(14),s=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("Flex 全称 Flexible box 布局模型，通常称为 flexbox 或 flex，也称为弹性盒子或弹性布局。"),v("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("Flex MDN"),v("OutboundLink")],1)]),e._v(" "),v("h2",{attrs:{id:"justify-content"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#justify-content"}},[e._v("#")]),e._v(" justify-content")]),e._v(" "),v("p",[e._v("如果把 "),v("code",[e._v("flex")]),e._v(" 容器设为一个行，它的子元素会从左到右逐个排列； 如果把 "),v("code",[e._v("flex")]),e._v(" 容器设为一个列，它的子元素会从上到下逐个排列。 子元素排列的方向被称为 "),v("em",[e._v("main axis（主轴）")]),e._v("。 对于行，主轴水平贯穿每一个项目； 对于列，主轴垂直贯穿每一个项目。")]),e._v(" "),v("p",[e._v("对于如何沿主轴线排放 "),v("code",[e._v("flex")]),e._v(" 项目，有几种选择。 很常用的一种是 "),v("code",[e._v("justify-content: center;")]),e._v(" 即 "),v("code",[e._v("flex")]),e._v(" 子元素在 "),v("code",[e._v("flex")]),e._v(" 容器中居中排列。")]),e._v(" "),v("p",[e._v("其他选择包括：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("flex-start")]),e._v("：从 flex 容器的起始位置开始排列项目。 对行来说是把项目移至左边， 对于列是把项目移至顶部。 如未设置 "),v("code",[e._v("justify-content")]),e._v(" 的值，那么这就是默认值。")]),e._v(" "),v("li",[v("strong",[e._v("flex-end")]),e._v("：从 flex 容器的终止位置开始排列项目。 对行来说是把项目移至右边， 对于列是把项目移至底部。")]),e._v(" "),v("li",[v("strong",[e._v("space-between")]),e._v("：项目间保留一定间距地沿主轴居中排列。 第一个和最后一个项目被放置在容器边沿。 例如，在行中第一个项目会紧贴着容器左边，最后一个项目会紧贴着容器右边，然后其他项目均匀排布。")]),e._v(" "),v("li",[v("strong",[e._v("space-around")]),e._v("：与 "),v("code",[e._v("space-between")]),e._v(" 相似，但头尾两个项目不会紧贴容器边缘，所有项目之间的空间均匀排布。")]),e._v(" "),v("li",[v("strong",[e._v("space-evenly")]),e._v("：头尾两个项目不会紧贴容器边缘，所有项目之间的空间均匀排布。")])]),e._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"图片","data-src":"https://www.w3.org/TR/css-flexbox-1/images/flex-direction-terms.svg",loading:"lazy"}})]),e._v(" "),v("h2",{attrs:{id:"align-items"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#align-items"}},[e._v("#")]),e._v(" align-items")]),e._v(" "),v("p",[e._v("CSS 中的 "),v("code",[e._v("align-items")]),e._v(" 属性用来定义 "),v("code",[e._v("flex")]),e._v(" 子元素沿交叉轴的对齐方式。 对行来说，定义的是元素的上下对齐方式； 对列来说，是定义元素的左右对齐方式。")]),e._v(" "),v("p",[v("code",[e._v("align-items")]),e._v(" 的可选值包括：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("flex-start")]),e._v("：从 "),v("code",[e._v("flex")]),e._v(" 容器的起始位置开始对齐项目。 对行来说，把项目移至容器顶部； 对列来说，是把项目移至容器左边。")]),e._v(" "),v("li",[v("strong",[e._v("flex-end")]),e._v("：从 "),v("code",[e._v("flex")]),e._v(" 容器的终止位置开始对齐项目。 对行来说，把项目移至容器底部； 对列来说，把项目移至容器右边。")]),e._v(" "),v("li",[v("strong",[e._v("center")]),e._v("：把项目居中放置。 对行来说，垂直居中（项目距离顶部和底部的距离相等）； 对列来说，水平居中（项目距离左边和右边的距离相等）。")]),e._v(" "),v("li",[v("strong",[e._v("stretch")]),e._v("：拉伸项目，填满 "),v("code",[e._v("flex")]),e._v(" 容器。 例如，排成行的项目从容器顶部拉伸到底部。 如未设置"),v("code",[e._v("align-items")]),e._v("的值，那么这就是默认值。")]),e._v(" "),v("li",[v("strong",[e._v("baseline")]),e._v("：沿基线对齐。 基线是文本相关的概念，可以认为它是字母排列的下端基准线。")])]),e._v(" "),v("h2",{attrs:{id:"flex-wrap"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#flex-wrap"}},[e._v("#")]),e._v(" flex-wrap")]),e._v(" "),v("p",[v("code",[e._v("CSS flexbox")]),e._v(" 有一个把 flex 子元素拆分为多行（或多列）的特性。 默认情况下，"),v("code",[e._v("flex")]),e._v(" 容器会调整项目大小，把它们都塞到一起。 对于行来说，所有项目都会在一条直线上。")]),e._v(" "),v("p",[e._v("不过，使用 "),v("code",[e._v("flex-wrap")]),e._v(" 属性可以使项目换行展示。 这意味着多出来的子元素会被移到新的行或列。 换行发生的断点由子元素和容器的大小决定。")]),e._v(" "),v("p",[e._v("换行方向的可选值有这些：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("nowrap")]),e._v("：默认值，不换行。")]),e._v(" "),v("li",[v("strong",[e._v("wrap")]),e._v("：如果排列以行为基准，就将行从上往下排列；如果排列以列为基准，就将列从左往右排列。")]),e._v(" "),v("li",[v("strong",[e._v("wrap-reverse")]),e._v("：如果排列以行为基准，就将行从下往上排列；如果排列以列为基准，就将列从右往左排列。")])]),e._v(" "),v("h2",{attrs:{id:"flex-shrink"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#flex-shrink"}},[e._v("#")]),e._v(" flex-shrink")]),e._v(" "),v("p",[e._v("使用之后，如果 "),v("code",[e._v("flex")]),e._v(" 容器太小，则子元素会自动缩小。 当容器的宽度小于里面所有子元素的宽度之和时，所有子元素都会自动压缩。")]),e._v(" "),v("p",[e._v("子元素的 "),v("code",[e._v("flex-shrink")]),e._v(" 接受数值作为属性值。 数值越大，则该元素与其他元素相比会被压缩得更厉害。 比如，一个项目的 "),v("code",[e._v("flex-shrink")]),e._v(" 属性值为 1，另一个项目的 "),v("code",[e._v("flex-shrink")]),e._v(" 属性值为 3，那么后者相比前者会受到 3 倍压缩。")]),e._v(" "),v("h2",{attrs:{id:"flex-grow"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#flex-grow"}},[e._v("#")]),e._v(" flex-grow")]),e._v(" "),v("p",[e._v("与 "),v("code",[e._v("flex-shrink")]),e._v(" 相对的是 "),v("code",[e._v("flex-grow")]),e._v("。 相应地，"),v("code",[e._v("flex-grow")]),e._v(" 会在容器太大时对子元素作出调整。")]),e._v(" "),v("h2",{attrs:{id:"flex-basis"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#flex-basis"}},[e._v("#")]),e._v(" flex-basis")]),e._v(" "),v("p",[v("code",[e._v("flex-basis")]),e._v(" 属性定义了在使用 "),v("em",[e._v("CSS")]),e._v(" 的 "),v("code",[e._v("flex-shrink")]),e._v(" 或 "),v("code",[e._v("flex-grow")]),e._v(" 属性对元素进行调整前，元素的初始大小。")]),e._v(" "),v("p",[v("code",[e._v("flex-basis")]),e._v(" 属性的单位与其他表示尺寸的属性的单位一致（px、em、% 等）。 如果值为 "),v("em",[e._v("auto")]),e._v("，则项目的尺寸随内容调整。")]),e._v(" "),v("h2",{attrs:{id:"order"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#order"}},[e._v("#")]),e._v(" order")]),e._v(" "),v("p",[v("code",[e._v("order")]),e._v(" 属性告诉 "),v("em",[e._v("CSS flex")]),e._v(" 容器里子元素的顺序。 默认情况下，项目排列顺序与源 "),v("em",[e._v("HTML")]),e._v(" 文件中顺序相同。 这个属性接受数字作为参数，可以使用负数。")]),e._v(" "),v("h2",{attrs:{id:"align-self"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#align-self"}},[e._v("#")]),e._v(" align-self")]),e._v(" "),v("p",[e._v("这个属性允许你调整单个子元素自己的对齐方式，而不会影响到全部子元素。 因为 "),v("em",[e._v("float、clear 和 vertical-align")]),e._v(" 等调整对齐方式的属性都不能应用于 "),v("code",[e._v("flex")]),e._v(" 子元素，所以这个属性显得十分有用。")]),e._v(" "),v("p",[v("code",[e._v("align-self")]),e._v(" 可设置的值与 "),v("code",[e._v("align-items")]),e._v(" 的一样，并且它会覆盖 "),v("code",[e._v("align-items")]),e._v(" 所设置的值。")])])}),[],!1,null,null,null);_.default=s.exports}}]);