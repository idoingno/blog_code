(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{624:function(t,a,s){"use strict";s.r(a);var e=s(14),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("一个经典的链表应用场景，那就是 "),s("code",[t._v("LRU")]),t._v(" 缓存淘汰算法")]),t._v(" "),s("p",[t._v("缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的 CPU 缓存、数据库缓存、浏览器缓存等等。")]),t._v(" "),s("p",[t._v("缓存的大小有限，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留？这就需要缓存淘汰策略来决定。常见的策略有三种："),s("strong",[t._v("先进先出策略 FIFO（First In，First Out）")]),t._v("、"),s("strong",[t._v("最少使用策略 LFU（Least Frequently Used）")]),t._v("、"),s("strong",[t._v("最近最少使用策略 LRU（Least Recently Used）")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"链表结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表结构"}},[t._v("#")]),t._v(" 链表结构")]),t._v(" "),s("p",[t._v("对比一下 链表和数组的数据结构")]),t._v(" "),s("h3",{attrs:{id:"底层的存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#底层的存储结构"}},[t._v("#")]),t._v(" 底层的存储结构")]),t._v(" "),s("p",[t._v("数组需要一块连续的内存空间来存储，对内存的要求比较高。")]),t._v(" "),s("p",[t._v("链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用")]),t._v(" "),s("blockquote",[s("p",[t._v("空间换时间：对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。")])]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L3.webp",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"单链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单链表"}},[t._v("#")]),t._v(" 单链表")]),t._v(" "),s("p",[t._v("内存块称为链表的“结点”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。如图所示，我们把这个记录下个结点地址的指针叫作后继指针 next。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L4.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("习惯性地把第一个结点叫作头结点，把最后一个结点叫作尾结点。其中，头结点用来记录链表的基地址。有了它，就可以遍历得到整条链表。而尾结点特殊的地方是：指针不是指向下一个结点，而是指向一个空地址 "),s("code",[t._v("NULL")]),t._v("，表示这是链表上最后一个结点。")]),t._v(" "),s("p",[t._v("插入：在进行数组的插入、删除操作时，为了保持内存数据的连续性，需要做大量的数据搬移，所以时间复杂度是 "),s("common-latexDisplay",[t._v(" O(n) ")]),t._v("。而在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的。")],1),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L5.webp",loading:"lazy"}})]),t._v(" "),s("blockquote",[s("p",[t._v("从图中可以看出，针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度是 "),s("common-latexDisplay",[t._v(" O(1) ")])],1)]),t._v(" "),s("p",[t._v("访问低效：因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。链表随机访问的性能没有数组好，需要 "),s("common-latexDisplay",[t._v(" O(n) ")]),t._v(" 的时间复杂度。")],1),t._v(" "),s("h3",{attrs:{id:"循环链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[t._v("#")]),t._v(" 循环链表")]),t._v(" "),s("p",[t._v("循环链表是一种特殊的单链表。它跟单链表唯一的区别就在尾结点。单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L6.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环型结构特点时，就特别适合采用循环链表。")]),t._v(" "),s("h3",{attrs:{id:"双向链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[t._v("#")]),t._v(" 双向链表")]),t._v(" "),s("p",[t._v("单向链表只有一个方向，结点只有一个后继指针 "),s("code",[t._v("next")]),t._v(" 指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针 "),s("code",[t._v("next")]),t._v(" 指向后面的结点，还有一个前驱指针 "),s("code",[t._v("prev")]),t._v(" 指向前面的结点。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L7.webp",loading:"lazy"}})]),t._v(" "),s("ul",[s("li",[t._v("双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。")]),t._v(" "),s("li",[t._v("如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。")]),t._v(" "),s("li",[t._v("虽然两个指针比较浪费存储空间，但可以支持双向遍历")])]),t._v(" "),s("h3",{attrs:{id:"双向循环链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向循环链表"}},[t._v("#")]),t._v(" 双向循环链表")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L8.webp",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"数组和链表性能比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组和链表性能比较"}},[t._v("#")]),t._v(" 数组和链表性能比较")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L9.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("数组简单易用，在实现上使用的是连续的内存空间，可以借助 "),s("code",[t._v("CPU")]),t._v(" 的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对 "),s("code",[t._v("CPU")]),t._v(" 缓存不友好，没办法有效预读。")]),t._v(" "),s("p",[t._v("数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然地支持动态扩容。")]),t._v(" "),s("p",[t._v("如果代码对内存的使用非常苛刻，那数组就更适合。因为链表中的每个结点都需要消耗额外的存储空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是 "),s("code",[t._v("Java")]),t._v(" 语言，就有可能会导致频繁的 "),s("code",[t._v("GC（Garbage Collection，垃圾回收）")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"lru-缓存淘汰算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lru-缓存淘汰算法"}},[t._v("#")]),t._v(" LRU 缓存淘汰算法")]),t._v(" "),s("p",[t._v("维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。")])]),t._v(" "),s("li",[s("p",[t._v("如果此数据没有在缓存链表中，又可以分为两种情况：")]),t._v(" "),s("ul",[s("li",[t._v("如果此时缓存未满，则将此结点直接插入到链表的头部；")]),t._v(" "),s("li",[t._v("如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("(概括下： 使用定长链表来保存所有缓存的值，并且最老的值放在链表最后面 当访问的值在链表中时： 将找到链表中值将其删除，并重新在链表头添加该值（保证链表中 数值的顺序是从新到旧） 当访问的值不在链表中时： 当链表已满：删除链表最后一个值，将要添加的值放在链表头 当链表未满：直接在链表头添加)")])]),t._v(" "),s("h2",{attrs:{id:"写链表代码技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写链表代码技巧"}},[t._v("#")]),t._v(" 写链表代码技巧")]),t._v(" "),s("h3",{attrs:{id:"技巧一-理解指针或引用的含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技巧一-理解指针或引用的含义"}},[t._v("#")]),t._v(" 技巧一：理解指针或引用的含义")]),t._v(" "),s("p",[t._v("有些语言有“指针”的概念，比如 C 语言；有些语言没有指针，取而代之的是“引用”，比如 Java、Python。不管是“指针”还是“引用”，实际上，它们的意思都是一样的，都是存储所指对象的内存地址。")]),t._v(" "),s("p",[t._v("将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量。")]),t._v(" "),s("ul",[s("li",[t._v("经常会有这样的代码："),s("code",[t._v("p->next=q")]),t._v("。这行代码是说，"),s("code",[t._v("p")]),t._v(" 结点中的 "),s("code",[t._v("next")]),t._v(" 指针存储了 "),s("code",[t._v("q")]),t._v(" 结点的内存地址。")]),t._v(" "),s("li",[t._v("写链表代码经常会用到的："),s("code",[t._v("p->next=p->next->next")]),t._v("。这行代码表示，"),s("code",[t._v("p")]),t._v(" 结点的 "),s("code",[t._v("next")]),t._v(" 指针存储了 "),s("code",[t._v("p")]),t._v(" 结点的下下一个结点的内存地址。")])]),t._v(" "),s("h3",{attrs:{id:"技巧二-警惕指针丢失和内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技巧二-警惕指针丢失和内存泄漏"}},[t._v("#")]),t._v(" 技巧二：警惕指针丢失和内存泄漏")]),t._v(" "),s("p",[t._v("插入结点时，一定要注意操作的顺序")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L10.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("如图所示，我们希望在结点 a 和相邻的结点 b 之间插入结点 x，假设当前指针 p 指向结点 a。")]),t._v(" "),s("div",{staticClass:"language-C extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这块代码就会发生指针丢失和内存泄露")]),t._v("\np"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将p的next指针指向x结点；")]),t._v("\nx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将x的结点的next指针指向b结点；")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p->next 指针在完成第一步操作之后，已经不再指向结点 b 了，而是指向结点 x。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第 2 行代码相当于将 x 赋值给 x->next，自己指向自己。因此，整个链表也就断成了两半，从结点 b 往后的所有结点都无法访问到了。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要先将结点 x 的 next 指针指向结点 b，再把结点 a 的 next 指针指向结点 x，这样才不会丢失指针，导致内存泄漏。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里只需要把两行代码顺序颠倒一下就行")]),t._v("\n")])])]),s("p",[t._v("删除链表结点时，也一定要记得手动释放内存空间，否则，也会出现内存泄漏的问题。当然，对于像 "),s("code",[t._v("Java")]),t._v(" 这种虚拟机自动管理内存的编程语言来说，就不需要考虑这么多了。")]),t._v(" "),s("h3",{attrs:{id:"技巧三-利用哨兵简化实现难度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技巧三-利用哨兵简化实现难度"}},[t._v("#")]),t._v(" 技巧三：利用哨兵简化实现难度")]),t._v(" "),s("div",{staticClass:"language-C extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果我们在结点 p 后面插入一个新的结点，只需要下面两行代码就可以搞定。")]),t._v("\n\nnew_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是，当要向一个空链表中插入第一个结点，刚刚的逻辑就不能用了。我们需要进行下面这样的特殊处理，其中 head 表示链表的头结点。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果要删除结点 p 的后继结点，我们只需要一行代码就可以搞定。")]),t._v("\np"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是，如果要删除链表中的最后一个结点，前面的删除代码就不 work 了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。")]),t._v(" "),s("p",[t._v("表示一个空链表: "),s("code",[t._v("head=null")]),t._v(" 表示链表中没有结点了。其中 "),s("code",[t._v("head")]),t._v(" 表示头结点指针，指向链表中的第一个结点。")]),t._v(" "),s("p",[t._v("如果引入哨兵结点，在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫"),s("strong",[t._v("带头链表")]),t._v("。相反，没有哨兵结点的链表就叫作"),s("strong",[t._v("不带头链表")]),t._v("。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L11.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑了。")]),t._v(" "),s("h3",{attrs:{id:"技巧四-重点留意边界条件处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技巧四-重点留意边界条件处理"}},[t._v("#")]),t._v(" 技巧四：重点留意边界条件处理")]),t._v(" "),s("p",[t._v("软件开发中，代码在一些边界或者异常情况下，最容易产生 "),s("code",[t._v("Bug")]),t._v("。链表代码也不例外。要实现没有 "),s("code",[t._v("Bug")]),t._v(" 的链表代码，一定要在编写的过程中以及编写完成之后，检查边界条件是否考虑全面，以及代码在边界条件下是否能正确运行。")]),t._v(" "),s("p",[t._v("经常用来检查链表代码是否正确的边界条件有这样几个：")]),t._v(" "),s("ul",[s("li",[t._v("如果链表为空时，代码是否能正常工作？")]),t._v(" "),s("li",[t._v("如果链表只包含一个结点时，代码是否能正常工作？")]),t._v(" "),s("li",[t._v("如果链表只包含两个结点时，代码是否能正常工作？")]),t._v(" "),s("li",[t._v("代码逻辑在处理头结点和尾结点的时候，是否能正常工作？")])]),t._v(" "),s("h3",{attrs:{id:"技巧五-举例画图-辅助思考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技巧五-举例画图-辅助思考"}},[t._v("#")]),t._v(" 技巧五：举例画图，辅助思考")]),t._v(" "),s("p",[t._v("对于稍微复杂的链表操作，比如前面提到的单链表反转，指针一会儿指这，一会儿指那，一会儿就被绕晕了。所以这个时候就要使用大招了，"),s("strong",[t._v("举例法和画图法")]),t._v("。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/L12.webp",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"tips"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" Tips")]),t._v(" "),s("p",[t._v("精选了 5 个常见的链表操作用于练习")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/algorithm/js-basic-algorithm/#链表反转"}},[t._v(" 单链表反转 - ")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/algorithm/js-basic-algorithm/#环形链表"}},[t._v(" 链表中环的检测 - ")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/algorithm/js-basic-algorithm/#合并有序链表"}},[t._v(" 两个有序的链表合并 - ")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/algorithm/js-basic-algorithm/#删除链表的倒数第n个结点"}},[t._v(" 删除链表倒数第N个结点 - ")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/algorithm/js-basic-algorithm/#求链表的中间结点"}},[t._v(" 求链表的中间结点 - ")])],1)])])}),[],!1,null,null,null);a.default=v.exports}}]);