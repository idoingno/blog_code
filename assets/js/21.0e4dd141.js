(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{627:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"栈结构【stack】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈结构【stack】"}},[t._v("#")]),t._v(" 栈结构【Stack】")]),t._v(" "),s("p",[s("strong",[t._v("后进者先出，先进者后出，这就是典型的“栈”结构")])]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/S1.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("从栈的操作特性上来看，"),s("strong",[t._v("栈是一种“操作受限”的线性表")]),t._v("，只允许在一端插入和删除数据。")]),t._v(" "),s("p",[t._v("栈主要包含两个操作，"),s("strong",[t._v("入栈")]),t._v("和"),s("strong",[t._v("出栈")]),t._v("，也就是在栈顶插入一个数据和从栈顶删除一个数据。实际上，栈既可以用数组来实现，也可以用链表来实现。用数组实现的栈，叫作顺序栈，用链表实现的栈，叫作链式栈。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/S2.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("因为在大部分情况下，入栈操作的时间复杂度 O 都是 O(1)，只有在个别时刻才会退化为 O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下的耗时就接近 O(1)。")]),t._v(" "),s("h2",{attrs:{id:"函数调用栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数调用栈"}},[t._v("#")]),t._v(" 函数调用栈")]),t._v(" "),s("p",[t._v("操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构, 用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\nint "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   int a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   int ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   int res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   reuturn "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nint "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("int x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" int y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   int sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/S3.webp",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"表达式求值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式求值"}},[t._v("#")]),t._v(" 表达式求值")]),t._v(" "),s("p",[t._v("实际上，编译器就是通过两个栈来实现的。其中一个保存操作数的栈，另一个是保存运算符的栈。从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较。")]),t._v(" "),s("p",[t._v("如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 "),s("code",[t._v("2")]),t._v(" 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/S4.webp",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"括号匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#括号匹配"}},[t._v("#")]),t._v(" 括号匹配")]),t._v(" "),s("p",[t._v("假设表达式中只包含三种括号，圆括号 "),s("code",[t._v("()")]),t._v("、方括号"),s("code",[t._v("[]")]),t._v("和花括号"),s("code",[t._v("{}")]),t._v("，并且它们可以任意嵌套。比如，"),s("code",[t._v("{[] ()[{}]}")]),t._v("或"),s("code",[t._v("[{()}([])]")]),t._v("等都为合法格式，而"),s("code",[t._v("{[}()]")]),t._v("或"),s("code",[t._v("[({)]")]),t._v("为不合法的格式。")]),t._v(" "),s("p",[t._v("用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如"),s("code",[t._v("“(”")]),t._v("跟“)”匹配，"),s("code",[t._v("“[”")]),t._v("跟"),s("code",[t._v("“]”")]),t._v("匹配，"),s("code",[t._v("“{”")]),t._v("跟"),s("code",[t._v("“}”")]),t._v("匹配，则继续扫描剩下的字符串。如果扫描的过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。")]),t._v(" "),s("p",[t._v("当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明有未匹配的左括号，为非法格式。")]),t._v(" "),s("h2",{attrs:{id:"浏览器的前进、后退功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的前进、后退功能"}},[t._v("#")]),t._v(" 浏览器的前进、后退功能")]),t._v(" "),s("p",[t._v("使用两个栈，"),s("code",[t._v("X")]),t._v(" 和 "),s("code",[t._v("Y")]),t._v("，把首次浏览的页面依次压入栈 "),s("code",[t._v("X")]),t._v("，当点击后退按钮时，再依次从栈 "),s("code",[t._v("X")]),t._v(" 中出栈，并将出栈的数据依次放入栈 "),s("code",[t._v("Y")]),t._v("。当我们点击前进按钮时，我们依次从栈 "),s("code",[t._v("Y")]),t._v(" 中取出数据，放入栈 "),s("code",[t._v("X")]),t._v(" 中。当栈 "),s("code",[t._v("X")]),t._v(" 中没有数据时，那就说明没有页面可以继续后退浏览了。当栈 "),s("code",[t._v("Y")]),t._v(" 中没有数据，那就说明没有页面可以点击前进按钮浏览了。")]),t._v(" "),s("p",[t._v("比如你顺序查看了 "),s("code",[t._v("a，b，c")]),t._v(" 三个页面，我们就依次把 "),s("code",[t._v("a，b，c")]),t._v(" 压入栈，这个时候，两个栈的数据就是这个样子：\n"),s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/S5.webp",loading:"lazy"}}),t._v("\n当你通过浏览器的后退按钮，从页面 "),s("code",[t._v("c")]),t._v(" 后退到页面 "),s("code",[t._v("a")]),t._v(" 之后，我们就依次把 "),s("code",[t._v("c")]),t._v(" 和 "),s("code",[t._v("b")]),t._v(" 从栈 "),s("code",[t._v("X")]),t._v(" 中弹出，并且依次放入到栈 "),s("code",[t._v("Y")]),t._v("。这个时候，两个栈的数据就是这个样子：\n"),s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/S6.webp",loading:"lazy"}}),t._v("\n这个时候你又想看页面 "),s("code",[t._v("b")]),t._v("，于是你又点击前进按钮回到 "),s("code",[t._v("b")]),t._v(" 页面，我们就把 "),s("code",[t._v("b")]),t._v(" 再从栈 "),s("code",[t._v("Y")]),t._v(" 中出栈，放入栈 "),s("code",[t._v("X")]),t._v(" 中。此时两个栈的数据是这个样子：\n"),s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/S7.webp",loading:"lazy"}}),t._v("\n这个时候，你通过页面 "),s("code",[t._v("b")]),t._v(" 又跳转到新的页面 "),s("code",[t._v("d")]),t._v(" 了，页面 c 就无法再通过前进、后退按钮重复查看了，所以需要清空栈 "),s("code",[t._v("Y")]),t._v("。此时两个栈的数据这个样子：\n"),s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/frontend-apprenticeship/imgs/js/S8.webp",loading:"lazy"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);